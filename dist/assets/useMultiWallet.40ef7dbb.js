var D=Object.defineProperty,E=Object.defineProperties;var b=Object.getOwnPropertyDescriptors;var T=Object.getOwnPropertySymbols;var A=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var k=(s,t,n)=>t in s?D(s,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):s[t]=n,m=(s,t)=>{for(var n in t||(t={}))A.call(t,n)&&k(s,n,t[n]);if(T)for(var n of T(t))S.call(t,n)&&k(s,n,t[n]);return s},p=(s,t)=>E(s,b(t));import{u as F,Y as e,Z as U,Q as L,s as $,$ as N,a0 as P,a1 as i,a2 as c,a3 as f,a4 as R,a5 as Q,a6 as V,a7 as Y,a8 as Z,a9 as j,aa as q,ab as z,ac as B}from"./index.dc867373.js";const g=s=>`celo://wallet/wc?uri=${s}`;function O(){var W;const{Connect:s,blockchain:t,Wallet:n}=F(),{initConnector:y}=e.useContractKitInternal(),d=U(),w=L($),u=N(),I=(W=P("users",u.currentUser.uid).data)==null?void 0:W.multiwallets,C=async a=>{const o=await j("users",u.currentUser.uid);if(!o)throw new Error("No Data In Users");if(a&&a.account&&w){if(!o.address.some(r=>r===a.account)&&!o.multiwallets.some(r=>r.address===a.account)){const r=[...o.address,a.account];await q().updateDoc("users",u.currentUser.uid,{address:r,multiwallets:[...o.multiwallets,{name:a.type,address:a.account,blockchain:t}]})}d(z(p(m({},w),{accountAddress:a.account}))),d(B(a.account))}},G=async()=>{try{const a=await s();return await C(a),a}catch(a){throw console.error(a),new Error(a.message)}},_=async(a,{index:o,privateKey:r}={})=>{let l;n&&h(n,{index:o,privateKey:r});try{l=h(a,{index:o,privateKey:r}),await y(l),l&&await C(l)}catch(M){throw console.error(M),new Error(M.message)}},h=(a,{index:o,privateKey:r}={})=>{switch(a){case e.WalletTypes.MetaMask:return new Z(e.Mainnet,c.CeloContract.GoldToken);case e.WalletTypes.PrivateKey:return new Y(e.Mainnet,r!=null?r:"",c.CeloContract.GoldToken);case e.WalletTypes.CeloExtensionWallet:return new V(e.Mainnet,c.CeloContract.GoldToken);case e.WalletTypes.Ledger:return new Q(e.Mainnet,o!=null?o:0,c.CeloContract.GoldToken);case e.WalletTypes.WalletConnect:return new i(e.Mainnet,c.CeloContract.GoldToken,{connect:{chainId:e.Mainnet.chainId}},R);case e.WalletTypes.CeloWallet:return new i(e.Mainnet,c.CeloContract.GoldToken,{connect:{chainId:e.Mainnet.chainId}},!1,void 0,1);case e.WalletTypes.CeloDance:return new i(e.Mainnet,c.CeloContract.GoldToken,{connect:{chainId:e.Mainnet.chainId}},f,g,1);case e.WalletTypes.Valora:return new i(e.Mainnet,c.CeloContract.GoldToken,{connect:{chainId:e.Mainnet.chainId}},f,g,1);default:throw new Error("None of the wallets are supported")}};return{walletSwitch:_,addWallet:G,data:I,Wallet:n}}export{O as u};
